package co.vinod.training.dao.impl;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate5.HibernateTemplate;
import org.springframework.stereotype.Repository;

import co.vinod.training.dao.DaoException;
import co.vinod.training.dao.ProductDao;
import co.vinod.training.entity.Product;

@Repository("htDao")
@SuppressWarnings("unchecked")
public class HibernateTemplateProductDao implements ProductDao {

	@Autowired(required = false)
	private HibernateTemplate template;

	@Override
	public void addNewProduct(Product product) throws DaoException {
		template.persist(product);
	}

	@Override
	public Product getProductById(Integer productId) throws DaoException {
		return template.get(Product.class, productId);
	}

	@Override
	public void updateProduct(Product product) throws DaoException {
		template.merge(product); // select from DB, compare with this object, update only if required
	}

	@Override
	public void deleteProduct(Integer productId) throws DaoException {
		Product product = this.getProductById(productId);
		if (product == null) {
			throw new DaoException("Invalid product id for deletion: " + productId);
		}
		template.delete(product);
	}

	@Override
	public int count() throws DaoException {

		return 0;
	}

	@Override
	public List<Product> getAllProducts() throws DaoException {
		DetachedCriteria dc = DetachedCriteria.forClass(Product.class);
		return (List<Product>) template.findByCriteria(dc);
	}

	@Override
	public List<Product> getProductsByCategory(Integer categoryId) throws DaoException {
		DetachedCriteria dc = DetachedCriteria.forClass(Product.class);
		dc.add(Restrictions.eq("categoryId", categoryId));
		return null;
	}

	@Override
	public List<Product> getProductsBySupplier(Integer supplierId) throws DaoException {

		return null;
	}

	@Override
	public List<Product> getProductsByPriceRange(Double min, Double max) throws DaoException {

		return null;
	}

	@Override
	public List<Product> getDiscontinuedProducts() throws DaoException {

		return null;
	}

	@Override
	public List<Product> getOutOfStockProducts() throws DaoException {

		return null;
	}

}
